/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.museum.controller;

import com.museum.model.BuyMuseumTicketsRequest;
import com.museum.model.BuyMuseumTicketsResponse;
import com.museum.model.Error;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-04-08T19:39:03.127433+01:00[Europe/London]", comments = "Generator version: 7.4.0")
@Validated
@Tag(name = "Tickets", description = "Museum tickets for general entrance or special events.")
public interface TicketsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /tickets : Buy museum tickets
     * Purchase museum tickets for general entry or special events.
     *
     * @param buyMuseumTicketsRequest  (required)
     * @return Success. (status code 200)
     *         or  (status code 400)
     *         or  (status code 404)
     */
    @Operation(
        operationId = "buyMuseumTickets",
        summary = "Buy museum tickets",
        description = "Purchase museum tickets for general entry or special events.",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Success.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = BuyMuseumTicketsResponse.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = BuyMuseumTicketsResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "MuseumPlaceholderAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/tickets",
        produces = { "application/json", "application/problem+json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<BuyMuseumTicketsResponse> buyMuseumTickets(
        @Parameter(name = "BuyMuseumTicketsRequest", description = "", required = true) @Valid @RequestBody BuyMuseumTicketsRequest buyMuseumTicketsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"confirmationCode\" : \"ticket-event-a98c8f-7eb12\", \"eventName\" : \"Pirate Coding Workshop\", \"ticketType\" : \"event\", \"message\" : \"Museum general entry ticket purchased\", \"ticketId\" : \"a54a57ca-36f8-421b-a6b4-2e8f26858a4c\", \"ticketDate\" : \"2023-10-29\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /tickets/{ticketId}/qr : Get ticket QR code
     * Return an image of your ticket with scannable QR code. Used for event entry.
     *
     * @param ticketId Identifier for a ticket to a museum event. Used to generate ticket image. (required)
     * @return Scannable event ticket in image format. (status code 200)
     *         or  (status code 400)
     *         or  (status code 404)
     */
    @Operation(
        operationId = "getTicketCode",
        summary = "Get ticket QR code",
        description = "Return an image of your ticket with scannable QR code. Used for event entry.",
        tags = { "Tickets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Scannable event ticket in image format.", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = org.springframework.core.io.Resource.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = org.springframework.core.io.Resource.class))
            }),
            @ApiResponse(responseCode = "400", description = "", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "", content = {
                @Content(mediaType = "image/png", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/problem+json", schema = @Schema(implementation = Error.class))
            })
        },
        security = {
            @SecurityRequirement(name = "MuseumPlaceholderAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tickets/{ticketId}/qr",
        produces = { "image/png", "application/problem+json" }
    )
    
    default ResponseEntity<org.springframework.core.io.Resource> getTicketCode(
        @Parameter(name = "ticketId", description = "Identifier for a ticket to a museum event. Used to generate ticket image.", required = true, in = ParameterIn.PATH) @PathVariable("ticketId") UUID ticketId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
